onTap: () async {
                      await widget.controller.seekTo(timeStamp);
                      Future.delayed(const Duration(milliseconds: 10), () {
                        widget.controller.pause();
                        Navigator.of(context).pop();
                      });
                    },


  Future<void> addMarker(String projectId, String feedback, int timeStamp,
    double dx, double dy, int order) {
  return markerCollection.add({
    'projectId': projectId,
    'feedback': feedback,
    'timeStamp': FieldValue.serverTimestamp(),
    'dx': dx,
    'dy': dy,
    'order': order,
  });
}

ListView.builder(
  itemCount: snapshot.data!.docs.length,
  itemBuilder: (context, index) {
    final sortedDocs = snapshot.data!.docs.toList()
      ..sort((a, b) {
        final aOrder = a['order'] ?? 0;
        final bOrder = b['order'] ?? 0;
        return aOrder.compareTo(bOrder);
      });

    final obj = sortedDocs[index];
    // The rest of your code...
  },
)



import 'dart:typed_data';

import 'package:Video_Review/collection/project_collection.dart';
import 'package:Video_Review/services/auth_services.dart';
import 'package:Video_Review/services/firestore_service.dart';
import 'package:Video_Review/views/project_video.dart';
import 'package:Video_Review/views/video_view.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart';
import 'package:video_player/video_player.dart';
import 'dart:io';

import 'package:video_thumbnail/video_thumbnail.dart';

class HomeView extends StatefulWidget {
  // final Isar isar;

  HomeView({
    Key? key,
    // required this.isar,
  }) : super(key: key);

  @override
  State<HomeView> createState() => _HomeViewState();
}

class _HomeViewState extends State<HomeView> {
  String? getuserId;
  String? titleP;
  String? videoPP;
  final FireStoreService fireStoreService = FireStoreService();
  String? projectId;
  List<ProjectColleciton>? projectsList;
  final ImagePicker picker = ImagePicker();
  late XFile? galleryVideo;

  @override
  void initState() {
    super.initState();
    //  getCurrentUser();
    // _readProjects();
  }

  Future<String> _saveVideo(XFile videoFile) async {
    final directory = await getApplicationDocumentsDirectory();
    final path = directory.path;
    final videoDirPath = '$path/videosDemo';

    final videoDir = Directory(videoDirPath);
    if (!videoDir.existsSync()) {
      videoDir.createSync(recursive: true);
    }
    final newVideoFilePath = '$videoDirPath/${videoFile.path.split('/').last}';

    await videoFile.saveTo(newVideoFilePath);

    return newVideoFilePath;
  }

  // getCurrentUser() async {
  //   final userCurrently = await AuthMethods().getCurrentUser();
  //   final userId = userCurrently.uid;
  //   //  print("The Current user is : $userCurrently");
  //   print("The Current user id is :$userId");
  //   setState(() {
  //     getuserId = userId;
  //   });
  // }

  // _addProject(String? videoPath) async {
  //   final projectCollection = widget.isar.projectCollecitons;
  //   final newProject = ProjectColleciton()..videopath = videoPath;
  //   final newprojectId = await widget.isar.writeTxn(() async {
  //     return await projectCollection.put(newProject);
  //   });

  //   setState(() {
  //     projectId = newprojectId;
  //   });
  //   print('Project ID: $projectId');
  // }
  Future<void> _addProject() async {
    DocumentReference projectRef = await fireStoreService.addProjects(
      projectId,
      titleP,
      videoPP,
      //   getuserId,
    );

    setState(() {
      projectId = projectRef.id;
    });

    print("The document ID is: $projectId");
  }

  Widget _buildThumbnailWidget(String videoPath) {
    return FutureBuilder<Uint8List>(
      future: _generateThumbnail(videoPath),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done &&
            snapshot.hasData) {
          return ClipRRect(
            borderRadius: BorderRadius.circular(10),
            child: Container(
              //width: double.infinity,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                image: DecorationImage(
                  image: MemoryImage(snapshot.data!),
                  fit: BoxFit.fitWidth,
                ),
              ),
            ),
          );
        } else {
          return Center(
            child: CircularProgressIndicator(),
          ); // You can return a placeholder here while the thumbnail is being generated.
        }
      },
    );
  }

  Future<Uint8List> _generateThumbnail(String videoPath) async {
    final thumbnail = await VideoThumbnail.thumbnailData(
      video: videoPath,
      imageFormat: ImageFormat.PNG,
      maxWidth: 128,
      quality: 100,
    );
    return thumbnail!;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color.fromARGB(255, 255, 255, 251),
      body: SafeArea(
        child: Stack(
          children: [
            Padding(
              padding: const EdgeInsets.only(right: 24, top: 70, bottom: 24.5),
              child: Align(
                alignment: Alignment.centerRight,
                child: Image.asset(
                  'assets/images/background.png',
                  fit: BoxFit.contain,
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.fromLTRB(24, 20, 24, 0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Image.asset(
                    "assets/icon/appstore.png",
                    height: 50,
                    width: 50,
                  ),
                  SizedBox(height: 19),
                  Text(
                    "My Videos",
                    style: GoogleFonts.openSans(
                      fontSize: 32,
                      fontWeight: FontWeight.w800,
                    ),
                  ),
                  SizedBox(height: 16),
                  Container(
                    width: 300,
                    child: Padding(
                      padding: const EdgeInsets.fromLTRB(0, 0, 23, 0),
                      child: Text(
                        "Click on any of the video to review and drop feedback pins. ",
                        style: GoogleFonts.openSans(
                          fontSize: 16,
                          fontWeight: FontWeight.w400,
                          color: Color.fromRGBO(0, 0, 0, 0.6),
                        ),
                      ),
                    ),
                  ),
                  SizedBox(height: 20),
                  Expanded(
                      child: StreamBuilder<QuerySnapshot>(
                    stream: fireStoreService.getProjects(),
                    builder: (context, snapshot) {
                      if (snapshot.connectionState == ConnectionState.waiting) {
                        return CircularProgressIndicator();
                      }
                      return GridView.builder(
                        shrinkWrap: true,
                        gridDelegate:
                            const SliverGridDelegateWithFixedCrossAxisCount(
                                mainAxisSpacing: 20,
                                crossAxisSpacing: 23,
                                crossAxisCount: 2,
                                mainAxisExtent: 168
                                //childAspectRatio: 150 / 178,
                                ),
                        itemCount:
                            (snapshot.data?.docs.reversed.length ?? 0) + 1,
                        itemBuilder: (context, index) {
                          if (index <
                              (snapshot.data?.docs.reversed.length ?? 0)) {
                            final obj = snapshot.data?.docs[index];
                            final title = obj?['title'];
                            final videopath = obj?['videoPath'];

                            final projectID = obj?.id;
                            final date = obj?['date'];
                            final thumbnail = _buildThumbnailWidget(videopath!);

                            return GestureDetector(
                              onTap: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => ProjectVideo(
                                      projectTitle: title,
                                      projectID: projectID,
                                      // isar: widget.isar,
                                      videoPath: videopath,
                                    ),
                                  ),
                                );
                              },
                              child: Container(
                                decoration: BoxDecoration(
                                  color: Color.fromARGB(255, 255, 255, 251),
                                  borderRadius: BorderRadius.circular(10),
                                  border: Border.all(
                                    width: 1,
                                    color: Color.fromRGBO(126, 100, 237, 1),
                                  ),
                                ),
                                child: Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    mainAxisAlignment: MainAxisAlignment.start,
                                    children: [
                                      Container(
                                        height: 79,
                                        decoration: BoxDecoration(
                                          borderRadius:
                                              BorderRadius.circular(10),
                                          //color: Colors.black,
                                        ),
                                        child: thumbnail,
                                      ),
                                      SizedBox(height: 14),
                                      Expanded(
                                        child: Text(
                                          title ?? "",
                                          style: GoogleFonts.openSans(
                                            fontSize: 18,
                                            fontWeight: FontWeight.w800,
                                          ),
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      ),
                                      SizedBox(height: 2),
                                      Expanded(
                                        child: Text(
                                          "Last Reviewed: $date",
                                          style: GoogleFonts.openSans(
                                            fontSize: 10,
                                            fontWeight: FontWeight.w400,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            );
                          } else {
                            return GestureDetector(
                              onTap: () async {
                                galleryVideo = await picker.pickVideo(
                                    source: ImageSource.gallery);
                                if (galleryVideo != null) {
                                  final newPath =
                                      await _saveVideo(galleryVideo!);
                                  await _addProject();
                                  print("projject id : $newPath");
                                  await Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (builder) => VideoView(
                                        //addProject: _addProject(newPath),
                                        projectID: projectId,
                                        videoPath: newPath,

                                        //addProject: _addProject(newPath),
                                      ),
                                    ),
                                  );
                                }
                              },
                              child: Container(
                                height: 168,
                                width: 170,
                                decoration: BoxDecoration(
                                  color: Color.fromRGBO(126, 100, 237, 1),
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  children: [
                                    Padding(
                                      padding: const EdgeInsets.fromLTRB(
                                          16, 16, 0, 39),
                                      child: Icon(
                                        Icons.add_circle,
                                        size: 40,
                                        color: Color.fromRGBO(255, 255, 255, 1),
                                      ),
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.fromLTRB(
                                          16, 0, 0, 0),
                                      child: Text(
                                        "Select New",
                                        style: GoogleFonts.openSans(
                                          fontSize: 20,
                                          fontWeight: FontWeight.w800,
                                          color:
                                              Color.fromRGBO(255, 255, 255, 1),
                                        ),
                                      ),
                                    ),
                                    Expanded(
                                      child: Padding(
                                        padding: const EdgeInsets.fromLTRB(
                                            16, 0, 0, 16),
                                        child: Text(
                                          "to start reviewing",
                                          style: GoogleFonts.openSans(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w600,
                                            color: Color.fromRGBO(
                                                255, 255, 255, 0.6),
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            );
                          }
                        },
                      );
                    },
                  )),
                  SizedBox(height: 20),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // _readProjects() async {
  //   widget.isar.projectCollecitons
  //       .where()
  //       .watch(fireImmediately: true)
  //       .listen((projects) {
  //     setState(() {
  //       projectsList = projects;
  //     });
  //   });
  // }
}





















  =============================================================================================================================================


















// ignore_for_file: avoid_print

import 'dart:io';

import 'package:Video_Review/views/home_view.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';

class FireStoreService {
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final CollectionReference projectCollection =
      FirebaseFirestore.instance.collection('project');
  final CollectionReference markerCollection =
      FirebaseFirestore.instance.collection('markers');
  final CollectionReference sharedCollection =
      FirebaseFirestore.instance.collection('sharedProjects');

  Future<DocumentReference> addProjects(String? projectId, String? title,
      String? videoPath, String? currentUserEmail) {
    return projectCollection.add({
      'projectId': projectId,
      'title': title,
      'videoPath': videoPath,
      'userEmail': currentUserEmail,
      'date': FieldValue.serverTimestamp(),
    });
  }

  Future<void> updateProject(
      String projectId, String title, String videoPath) async {
    DocumentReference projectRef = projectCollection.doc(projectId);
    await projectRef.update({
      'title': title,
      'videoPath': videoPath,
    });
  }

  Future<void> deleteProject(BuildContext context, String projectId) async {
    await projectCollection.doc(projectId).delete();
    await deleteMarkersForProject(projectId);
    Navigator.push(context, MaterialPageRoute(builder: (contex) => HomeView()));
  }

  Future<void> deleteMarkersForProject(projectId) async {
    return markerCollection
        .where('projectId', isEqualTo: projectId)
        .get()
        .then((querySnapshot) {
      querySnapshot.docs.forEach((doc) {
        doc.reference.delete();
      });
    });
  }

  Future<void> addMarker(String projectId, String feedback, int timeStamp,
      double dx, double dy, int order) {
    return markerCollection.add({
      'projectId': projectId,
      'feedback': feedback,
      'timeStamp': timeStamp,
      'dx': dx,
      'dy': dy,
      'order': order,
    });
  }

  // Future<void> addSharedEmail(String projectId, String email) {
  //   return sharedCollection.add({
  //     'email': email,
  //     'projectId': projectId,
  //   });
  // }

  Future<void> addSharedEmail(String projectId, String email) {
    return sharedCollection.add({
      'email': email,
      'projectId': projectId,
    }).then((value) {
      // Update the sharedEmails field in the project document
      projectCollection.doc(projectId).update({
        'sharedEmails': FieldValue.arrayUnion([email]),
      });
    });
  }

  Future<String> uploadVideo(String videoPath) async {
    Reference ref = _storage.ref().child('videos/${DateTime.now()}.mp4');
    await ref.putFile(File(videoPath));
    String downloadUrl = await ref.getDownloadURL();
    return downloadUrl;
  }

  // Future<void> saveVideoData(String downloadedUrl) async {
  //   await _firestore.collection('videos').add({
  //     'url': downloadedUrl,
  //     'timeStamp': FieldValue.serverTimestamp(),
  //     'name': "User Video"
  //   });
  // }

  // Stream<QuerySnapshot> getProjects(String projectId) {
  //   return projectCollection
  //       .where('projectId', isEqualTo: projectId)
  //       .snapshots();
  // }

  // Stream<QuerySnapshot> getProjectsForUSer(String userId) {
  //   return projectCollection.where('userId', isEqualTo: userId).snapshots();
  // }
  // Stream<QuerySnapshot> getProjectsForUSer(String userEmail) async* {
  //   final userProjects =
  //       await projectCollection.where('userEmail', isEqualTo: userEmail).get();

  //   final projectIds = userProjects.docs.map((doc) => doc.id).toList();

  //   final sharedProjects = await projectCollection
  //       .where('sharedEmails', arrayContains: userEmail)
  //       .get();

  //   final sharedProjectIds = sharedProjects.docs.map((doc) => doc.id).toList();

  //   final allProjectIds = [...projectIds, ...sharedProjectIds];

  //   yield* projectCollection
  //       .where(FieldPath.documentId, whereIn: allProjectIds)
  //       .snapshots();
  // }
// Inside your FireStoreService class
  Stream<QuerySnapshot> getProjectsForUser(String currentEmail) {
    return projectCollection
        .where('userEmail', isEqualTo: currentEmail)
        .snapshots();
  }

  Stream<QuerySnapshot> getProjects(String projectId) {
    return projectCollection
        .where('projectId', isEqualTo: projectId)
        .snapshots();
  }

  Stream<QuerySnapshot> getmarkersForProjects(String projectId) {
    return markerCollection
        .where('projectId', isEqualTo: projectId)
        .orderBy('order')
        .snapshots();
  }

  Stream<QuerySnapshot> displayMarkerFromFirestore(String projectId) {
    return markerCollection
        .where('projectId', isEqualTo: projectId)
        .snapshots();
  }

  Stream<QuerySnapshot> getEmailsOfProject(String projectId) {
    return sharedCollection
        .where('projectId', isEqualTo: projectId)
        .snapshots();
  }

  Future addUser(String userId, Map<String, dynamic> userInfoMap) {
    return _firestore.collection("User").doc(userId).set(userInfoMap);
  }
}

